---
--- Generated by Luanalysis
--- Created by kigawa.
--- DateTime: 2023/01/29 1:00
---
local function getNumberProperty(label)
  return property.getNumber(label)
end
local function getBool(channel)
  return input.getBool(channel)
end
local function getNumber(channel)
  return input.getNumber(channel)
end
local function setBool(channel, value)
  return output.setBool(channel, value)
end
local function setNumber(channel, value)
  return output.setNumber(channel, value)
end
-- --------------------------------
local rpsChannel = 1
local throttleChannel = 3
local clutchChannel = 4

local powerChannel = 1
local starterChannel = 2

local defaultThrottle = getNumberProperty("default throttle")
local bigChangeSize = getNumberProperty("big change size")
local throttleChangeRate = getNumberProperty("throttle change rate")
local throttleSuppressRate = getNumberProperty("throttle suppress rate")
local targetRps = getNumberProperty("target rps")
-- ------------------------------
local throttle = defaultThrottle
local beforeRps = 0

local upCount = 0
local downCount = 0
function onTick()
  local power = getBool(powerChannel)
  if not power then
    setThrottle(0)
    setBool(starterChannel, false)
    beforeRps = 0
    return
  end

  local rps = getNumber(rpsChannel)

  if bigChangeSize < math.abs(beforeRps - rps) then
    upCount = 0
    downCount = 0
  end
  if rps < 4 then
    setThrottle(defaultThrottle)
    setNumber(clutchChannel, 0)
    setBool(starterChannel, true)
    beforeRps = rps
    return
  else
    setNumber(clutchChannel, 1)
    setBool(starterChannel, false)
  end

  local changeValue = (((targetRps - rps) * (targetRps - rps)) * throttleChangeRate)
  changeValue = changeValue / ((getCount(rps) * throttleSuppressRate) + 1)

  if targetRps < rps then
    changeValue = changeValue * -1
  end

  local changedThrottle = throttle + changeValue
  setThrottle(changedThrottle)
  beforeRps = rps
end

function getCount(rps)
  local result = 0
  if rps < beforeRps then
    downCount = 0
    result = upCount
    upCount = upCount + 1
  elseif beforeRps < rps then
    upCount = 0
    result = downCount
    downCount = downCount + 1
  end
  return result
end

function setThrottle(value)
  if value < 0 then
    throttle = 0
  elseif 1 < value then
    throttle = 1
  else
    throttle = value
  end
  setNumber(throttleChannel, throttle)
end
